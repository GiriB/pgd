<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
    <head>
        <script type="text/javascript" src="{{MEDIA_URL}}/js/jquery-1.2.6.js"></script>
        <script type="text/javascript" src="{{MEDIA_URL}}/js/jquery.progressbar.js"></script>
        <script type="text/javascript" src="{{MEDIA_URL}}/js/json2.js"></script>
        <script type="text/javascript" src="{{MEDIA_URL}}/js/jquery.acts_as_tree_table.js"></script>
        
        <script>
        function ajaxObject(url, callbackFunction) {
            var that=this;
            this.updating = false;
            this.abort = function() {
                if (that.updating) {
                that.updating=false;
                that.AJAX.abort();
                that.AJAX=null;
                }
            }
            this.update = function(passData,postMethod) { 
                if (that.updating) { return false; }
                that.AJAX = null;
                if (window.XMLHttpRequest) {
                that.AJAX=new XMLHttpRequest();
                } else {
                that.AJAX=new ActiveXObject("Microsoft.XMLHTTP");
                }
                if (that.AJAX==null) {
                return false;
                } else {
                that.AJAX.onreadystatechange = function() {
                    if (that.AJAX.readyState==4) {
                    that.updating=false;
                    that.callback(that.AJAX.responseText,that.AJAX.status,that.AJAX.responseXML);
                    that.AJAX=null;
                    }
                }
                that.updating = new Date();
                if (/post/i.test(postMethod)) {
                    var uri=urlCall+'?'+that.updating.getTime();
                    that.AJAX.open("POST", uri, true);
                    that.AJAX.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                    that.AJAX.setRequestHeader("Content-Length", passData.length);
                    that.AJAX.send(passData);
                } else {
                    var uri=urlCall+'?'+passData+'&timestamp='+(that.updating.getTime()); 
                    that.AJAX.open("GET", uri, true);
                    that.AJAX.send(null);
                }
                return true;
                }
            }
            var urlCall = url;
            this.callback = callbackFunction || function () { };
            }


            $(document).ready(function() {

                $('#taskstable').acts_as_tree_table({default_state:'collapsed'});

                $('span.complete').hide();
                $('span.progressbar').hide();
                $('span.progressbar').progressBar({barImage: 'http://doors.osuosl.org/media/images/progressbg_yellow.gif', boxImage:'http://doors.osuosl.org/media/images/progressbar.gif'});
                
                
                //$('span[@id^=progressbar-]').hide();
                
                //update();

                $('#button-foo').click(function(evt) {
                   id = 1;
                   progress = 79.99999;
                   $('#task-' + id + ' .progressbar').progressBar(progress);
                });
            });

            var STATUS_FAILED = -1;
            var STATUS_STOPPED = 0;
            var STATUS_RUNNING = 1;
            var STATUS_PAUSED = 2;
            var STATUS_COMPLETE = 3;

            var CLASS_FAILED = 'status-failed';
            var CLASS_STOPPED = 'status-stopped';
            var CLASS_RUNNING = 'status-running';
            var CLASS_PAUSED = 'status-paused';
            var CLASS_COMPLETE = 'status-complete';


            function removeAllStatus(node){
                node.removeClass(CLASS_FAILED);
                node.removeClass(CLASS_STOPPED);
                node.removeClass(CLASS_RUNNING);
                node.removeClass(CLASS_PAUSED);
                node.removeClass(CLASS_COMPLETE);
            }

            function processProgressData(incommingJSON) {
               statusMessage = JSON.parse(incommingJSON);
               progressArray = statusMessage['status'];
               //alert(incommingJSON);
               
               for (i=0; i<progressArray.length; i++){
                    // store array as vars for readability
                    id          = progressArray[i]['id'];
                    status      = progressArray[i]['status'];
                    progress    = progressArray[i]['progress'];
                    msg         = progressArray[i]['msg'];

                    elt = $('#task-' + id);
                    
                    //alert(status);
                    // check status and update if needed
                    if (status == STATUS_STOPPED && !elt.hasClass(CLASS_STOPPED)) {
                        // hide progress bar 
                        if (elt.hasClass(CLASS_RUNNING) || elt.hasClass(CLASS_PAUSED)) {
                            $('#task-' + id + ' span.progressbar').hide()
                        }

                        //hide completion message
                        if (elt.hasClass(CLASS_COMPLETE)) {
                            $('#task-' + id + ' span.complete').hide()
                        }

                        //set status
                        removeAllStatus(elt);
                        elt.addClass(CLASS_STOPPED);


                    } else if (status == STATUS_RUNNING) {
                        //hide completion message
                        if (elt.hasClass(CLASS_COMPLETE)) {
                            $('#task-' + id + ' span.complete').hide()
                        }

                        // show statusbar
                        if (!(elt.hasClass(CLASS_RUNNING) || elt.hasClass(CLASS_PAUSED))) {
                            $('#task-' + id + ' span.progressbar').show();
                        }
                        
                        // expand tree if needed
                        if (elt.hasClass('collapsed')) {
                            elt.toggle();
                        }

                        //update progressbar
                        $('#task-' + id + ' .progressbar').progressBar(progress);

                        //set status
                        removeAllStatus(elt);
                        elt.addClass(CLASS_RUNNING);

                    } else if (status == STATUS_PAUSED) {
                        // show statusbar
                        if (!(elt.hasClass(CLASS_RUNNING) || elt.hasClass(CLASS_PAUSED))) {
                            $('#task-' + id + ' span.progressbar').show();
                        }

                        //hide completion message
                        if (id.hasClass(CLASS_RUNNING) || id.hasClass(CLASS_PAUSED)) {
                            $('#task-' + id + ' span.complete').hide()
                        }

                        //set status
                        removeAllStatus(elt);
                        elt.addClass(STATUS_PAUSED);

                    } else if (status == STATUS_COMPLETE && !elt.hasClass(CLASS_COMPLETE)) {
                        // hide statusbar
                        if (elt.hasClass(CLASS_RUNNING) || elt.hasClass(CLASS_PAUSED)) {
                            bar = $('#task-' + id + ' span.progressbar')
                            bar.hide();
                            bar.progressBar(0);
                        }

                        //show completion message
                        $('#task-' + id + ' span.complete').show()

                        // collapse tree if needed
                        if (elt.hasClass('expanded')) {
                            elt.toggle();
                        }

                        //set status
                        removeAllStatus(elt);
                        elt.addClass(CLASS_COMPLETE);

                    } else if (status == STATUS_FAILED) {

                    }
               }
            }

            function start() {
                var ajaxRequest = new ajaxObject('start');
                ajaxRequest.update();
            }

            function update() {
                var ajaxRequest = new ajaxObject('progress', processProgressData);
                ajaxRequest.update();
                setTimeout('update()', 1000);
            }
            
            

        </script>
        <link rel="stylesheet" type="text/css" href="{{MEDIA_URL}}jquery.acts_as_tree_table.css" />
        <style>
            * { font-family: Helvetica, Arial, Tahoma; font-size: 12px; font-color: #444; line-height: 25px; padding: 0px; margin: 0px; }
            div.tasks {padding-left:20px; margin-left:20px;}
            td {padding-left:10px; min-width:50px;}
            span.complete{
                    background-image: url({{MEDIA_URL}}/images/check.png);
                    background-position: left center;
                    background-repeat: no-repeat;
                    cursor: pointer;
                    padding: 0;
                    zoom: 1; /* Hack for IE, works in IE7, I refuse to check in IE6 or older */
                    width:50px;
                    padding:20px;
                }
        </style>
    </head>
    <body>

        <h1>Test Page for Task Management</h1>
        
        Simple test page for monitoring and testing long running tasks written in python.  It supports multiple users whom will all see the same status for the task.
        
        This example task just prints some statements out to the console and sleeps.
        <br/>
        <br/>
        <h3>Instructions:</h3>
       
        <ol>
        <li>1) Press Update to begin ajax updates.  For now i dont want a barrage of ajax requests</li>
        <li>2) Press Start to start process,  if its not already running
        </ol>

        <br/>
        <h3>How It works</h3>
        Django is opening a socket to a TaskManagement server for each mod_python subinterpreter.  The server is multithreaded but there is only a single instance of the task being tracked.  Commands are sent to the server and json serialized responses are returned.  This adds some overhead but its acceptable for low usage apps.
        
        
        <br/>
        <hr/>
        <br/>

<div class="tasks">
        <table id="taskstable" class="status-stopped">
        {% for task in tasks %}
            {% if task.1 %}
                <tr id="task-{{task.0}}" class="child-of-task-{{task.1}}">
            {%else%}
                <tr id="task-{{task.0}}">
            {%endif%}
            <td>{{task.2}}</td><td><span class="complete"></span><span class="progressbar" id="progressbar-{{task.0}}"/></td></tr>
        {% endfor %}
        </table>
</div>
        
        <button onclick="update();">start ajax update</button>
        <button onclick="start();">start task</button>
        
        
    </body>
</html>
